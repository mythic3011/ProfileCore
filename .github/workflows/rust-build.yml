name: Rust Build and Test

on:
    push:
        branches: [main, develop, feature/rust-integration]
        paths:
            - "modules/ProfileCore-rs/**"
            - ".github/workflows/rust-build.yml"
    pull_request:
        branches: [main, develop]
        paths:
            - "modules/ProfileCore-rs/**"
    workflow_dispatch:

env:
    RUST_VERSION: stable
    CARGO_TERM_COLOR: always

jobs:
    # ===========================================================================
    # Windows Build (x64)
    # ===========================================================================
    build-windows:
        runs-on: windows-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Rust toolchain
              uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  toolchain: ${{ env.RUST_VERSION }}
                  target: x86_64-pc-windows-msvc
                  components: rustfmt, clippy

            - name: Cache Rust dependencies
              uses: Swatinem/rust-cache@v2
              with:
                  workspaces: modules/ProfileCore-rs

            - name: Check Rust formatting
              working-directory: modules/ProfileCore-rs
              run: cargo fmt -- --check

            - name: Run Clippy lints
              working-directory: modules/ProfileCore-rs
              run: cargo clippy -- -D warnings

            - name: Build Windows DLL (Debug)
              working-directory: modules/ProfileCore-rs
              run: cargo build --target x86_64-pc-windows-msvc

            - name: Build Windows DLL (Release)
              working-directory: modules/ProfileCore-rs
              run: cargo build --release --target x86_64-pc-windows-msvc

            - name: Run tests
              working-directory: modules/ProfileCore-rs
              run: cargo test --target x86_64-pc-windows-msvc

            - name: Upload Windows binary
              uses: actions/upload-artifact@v4
              with:
                  name: profilecore-windows-x64
                  path: modules/ProfileCore-rs/target/x86_64-pc-windows-msvc/release/profilecore_rs.dll
                  retention-days: 30

            - name: Upload test results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: test-results-windows
                  path: modules/ProfileCore-rs/target/x86_64-pc-windows-msvc/debug/
                  retention-days: 7

    # ===========================================================================
    # Linux Build (x64)
    # ===========================================================================
    build-linux:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Rust toolchain
              uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  toolchain: ${{ env.RUST_VERSION }}
                  target: x86_64-unknown-linux-gnu
                  components: rustfmt, clippy

            - name: Cache Rust dependencies
              uses: Swatinem/rust-cache@v2
              with:
                  workspaces: modules/ProfileCore-rs

            - name: Check Rust formatting
              working-directory: modules/ProfileCore-rs
              run: cargo fmt -- --check

            - name: Run Clippy lints
              working-directory: modules/ProfileCore-rs
              run: cargo clippy -- -D warnings

            - name: Build Linux SO (Debug)
              working-directory: modules/ProfileCore-rs
              run: cargo build --target x86_64-unknown-linux-gnu

            - name: Build Linux SO (Release)
              working-directory: modules/ProfileCore-rs
              run: cargo build --release --target x86_64-unknown-linux-gnu

            - name: Run tests
              working-directory: modules/ProfileCore-rs
              run: cargo test --target x86_64-unknown-linux-gnu

            - name: Upload Linux binary
              uses: actions/upload-artifact@v4
              with:
                  name: profilecore-linux-x64
                  path: modules/ProfileCore-rs/target/x86_64-unknown-linux-gnu/release/libprofilecore_rs.so
                  retention-days: 30

            - name: Upload test results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: test-results-linux
                  path: modules/ProfileCore-rs/target/x86_64-unknown-linux-gnu/debug/
                  retention-days: 7

    # ===========================================================================
    # macOS Build (Intel x64 + Apple Silicon arm64)
    # ===========================================================================
    build-macos:
        runs-on: macos-latest
        strategy:
            matrix:
                target:
                    - x86_64-apple-darwin
                    - aarch64-apple-darwin

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Rust toolchain
              uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  toolchain: ${{ env.RUST_VERSION }}
                  target: ${{ matrix.target }}
                  components: rustfmt, clippy

            - name: Cache Rust dependencies
              uses: Swatinem/rust-cache@v2
              with:
                  workspaces: modules/ProfileCore-rs
                  key: ${{ matrix.target }}

            - name: Check Rust formatting (x64 only)
              if: matrix.target == 'x86_64-apple-darwin'
              working-directory: modules/ProfileCore-rs
              run: cargo fmt -- --check

            - name: Run Clippy lints (x64 only)
              if: matrix.target == 'x86_64-apple-darwin'
              working-directory: modules/ProfileCore-rs
              run: cargo clippy -- -D warnings

            - name: Build macOS DYLIB (Debug)
              working-directory: modules/ProfileCore-rs
              run: cargo build --target ${{ matrix.target }}

            - name: Build macOS DYLIB (Release)
              working-directory: modules/ProfileCore-rs
              run: cargo build --release --target ${{ matrix.target }}

            - name: Run tests (x64 only)
              if: matrix.target == 'x86_64-apple-darwin'
              working-directory: modules/ProfileCore-rs
              run: cargo test --target ${{ matrix.target }}

            - name: Upload macOS binary
              uses: actions/upload-artifact@v4
              with:
                  name: profilecore-macos-${{ matrix.target }}
                  path: modules/ProfileCore-rs/target/${{ matrix.target }}/release/libprofilecore_rs.dylib
                  retention-days: 30

            - name: Upload test results (x64 only)
              if: always() && matrix.target == 'x86_64-apple-darwin'
              uses: actions/upload-artifact@v4
              with:
                  name: test-results-macos
                  path: modules/ProfileCore-rs/target/${{ matrix.target }}/debug/
                  retention-days: 7

    # ===========================================================================
    # Security Audit
    # ===========================================================================
    security-audit:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Rust toolchain
              uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  toolchain: ${{ env.RUST_VERSION }}

            - name: Install cargo-audit
              run: cargo install cargo-audit

            - name: Run security audit
              working-directory: modules/ProfileCore-rs
              run: cargo audit

    # ===========================================================================
    # Create Release (on tags)
    # ===========================================================================
    create-release:
        if: startsWith(github.ref, 'refs/tags/v')
        needs: [build-windows, build-linux, build-macos]
        runs-on: ubuntu-latest

        permissions:
            contents: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: release-artifacts

            - name: Create release archive
              run: |
                  cd release-artifacts
                  tar -czf profilecore-rust-binaries.tar.gz profilecore-*

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  files: release-artifacts/profilecore-rust-binaries.tar.gz
                  generate_release_notes: true
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # ===========================================================================
    # Summary
    # ===========================================================================
    summary:
        if: always()
        needs: [build-windows, build-linux, build-macos, security-audit]
        runs-on: ubuntu-latest

        steps:
            - name: Build Summary
              run: |
                  echo "# Rust Build Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "## Build Status" >> $GITHUB_STEP_SUMMARY
                  echo "- Windows x64: ${{ needs.build-windows.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- Linux x64: ${{ needs.build-linux.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- macOS (Intel + Apple Silicon): ${{ needs.build-macos.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- Security Audit: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
                  echo "- profilecore-windows-x64.dll" >> $GITHUB_STEP_SUMMARY
                  echo "- profilecore-linux-x64.so" >> $GITHUB_STEP_SUMMARY
                  echo "- profilecore-macos-x64.dylib" >> $GITHUB_STEP_SUMMARY
                  echo "- profilecore-macos-arm64.dylib" >> $GITHUB_STEP_SUMMARY
